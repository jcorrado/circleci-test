input {
  gelf {
    type => "ecs"
  }
}
filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\/%{DATA:container_name}\/%{DATA:container_id})?(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      remove_field => ["message"]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
    }
    if [syslog_message] {
      grok {
        match => { "syslog_message" => "(?<syslog_json>{.*})|(.*)" }
        remove_field => [ "syslog_message" ]
      }
      if [syslog_json] {
        json {
          source => "syslog_json"
          remove_field => [ "syslog_json" ]
        }
      }
    }
  }
  if [type] == "vpc_flow" {
    grok {
      match => ["message", "%{NUMBER:version} %{NUMBER:account-id} %{NOTSPACE:interface-id} %{NOTSPACE:srcaddr} %{NOTSPACE:dstaddr} %{NOTSPACE:srcport} %{NOTSPACE:dstport} %{NOTSPACE:protocol} %{NOTSPACE:packets} %{NOTSPACE:bytes} %{NUMBER:start} %{NUMBER:end} %{NOTSPACE:action} %{NOTSPACE:log-status}"]
    }
  }
  if [type] == "cloudtrail" {
    date {
      match => [ "eventTime", "ISO8601" ]
    }
  }
  if [type] == "s3logs" {
    grok {
      match => { "message" => "%{S3_ACCESS_LOG}" }
      remove_field => [ "message" ]
    }
    date {
      locale => "en"
      match => ["timestamp", "d/MMM/YYYY:HH:mm:ss Z"]
    }
  }
  if [type] == "elblogs" and ![cloudwatch_version] {
    grok {
      match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:elb_name} %{IP:elb_client_ip}:%{INT:elb_client_port:int} (?:%{IP:elb_backend_ip}:%{NUMBER:elb_backend_port:int}|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{INT:elb_status_code:int}|-) (?:%{INT:backend_status_code:int}|-) %{INT:elb_received_bytes:int} %{INT:elb_sent_bytes:int} \"(?:%{GREEDYDATA:elb_request}|-)\" \"(?:%{GREEDYDATA:userAgent}|-)\" %{NOTSPACE:elb_sslcipher} %{NOTSPACE:elb_sslprotocol}"]
      match => ["message", "%{GREEDYDATA:event_name} for ELB: %{NOTSPACE:elb_name} at %{TIMESTAMP_ISO8601:timestamp}"]
    }
    if [elb_request] =~ /.+/ {
      grok {
        match => ["elb_request", "(?:%{WORD:http_method}) (?:%{DATA:http_path})? (?:%{DATA:http_type}/%{NUMBER:http_version:float})?|%{GREEDYDATA:rawrequest}"]
      }
    }
    if [http_path] =~ /.+/ {
      grok {
        match => ["http_path", "(?:%{WORD:http_path_protocol}://)?(%{NOTSPACE:http_path_site}:)?(?:%{NUMBER:http_path_port:int})?(?:%{GREEDYDATA:http_path_url})?"]
      }
    }
    geoip {
      source => "elb_client_ip"
    }
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    useragent {
      source => "userAgent"
      prefix => "browser_"
    }
  }
  if [type] == "ecs" {
    grok {
      match => { "container_name" => "(ecs-(?<environment>\w+)-(?<service>[\w-]+)-\d+-(?<container>\w+)|ecs-(%{WORD:container}))" }
      remove_field => [ "container_name" ]
    }
    if [container] == "wombat" {
      grok {
        match => { "message" => "(?<wombat_json>{.*})" }
        remove_field => [ 'message' ]
      }
      json {
        source => "wombat_json"
      }
      if [data] {
        json {
          source => "data"
          remove_field => [ "data" ]
        }
      }
    }
    if [container] != "wombat" and [container] != "agent" {
      grok {
        match => { "message" => "(\[(?<job>\w+)\]\s\[(?<job_class>\S+)\]\s\[(?<job_id>\S+)\]\s(?<job_json>\{.*\})|(?<rails_json>{.*})|(?<other_msg>.*))" } 
        remove_field => [ "message" ]
      }
      if [job_json] {
        json {
          source => "job_json"
          remove_field => [ "job_json" ]
        }
      }
      if [rails_json] {
        json {
          source => "rails_json"
          remove_field => [ "rails_json" ]
        }
        #if [args] {
        #  json {
        #    source => "args"
        #    remove_field => [ "args" ]
        #  }
        #}
      }
    }
  }
}
output {
  file {
    path => "logstash.out.json"
  }
}
